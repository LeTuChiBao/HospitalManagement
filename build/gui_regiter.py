
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path
from datetime import datetime
# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage ,messagebox
from Ket_NoiSQL import MSSQLConnection
class RegisterWindow:
    def __init__(self):
        self.OUTPUT_PATH = Path(__file__).parent
        self.ASSETS_PATH = self.OUTPUT_PATH / Path(r"C:\Users\bao.le\Pycode\Do_An\build\assets_register\frame0")


    def relative_to_assets(self, path: str) -> Path:
        return self.ASSETS_PATH / Path(path)


    def UIregister_window(self):
        self.window = Tk()

        self.window.geometry("1225x500+300+300")
        self.window.configure(bg="#FFFFFF")

        self.canvas = Canvas(
            self.window,
            bg="#FFFFFF",
            height=500,
            width=1225,
            bd=0,
            highlightthickness=0,
            relief="ridge"
        )

        self.canvas.place(x=0, y=0)
        self.canvas.create_text(
            270.0,
            53.0,
            anchor="nw",
            text="CREATE ACCOUNT",
            fill="#9377EE",
            font=("RobotoRoman Bold", 40 * -1)
        )

        self.canvas.create_text(
            99.0,
            123.0,
            anchor="nw",
            text="User name:",
            fill="#555454",
            font=("RobotoRoman Bold", 16 * -1)
        )

        self.entry_image_1 = PhotoImage(
            file=self.relative_to_assets("entry_1.png"))
        self.entry_bg_1 = self.canvas.create_image(
            253.0,
            167.0,
            image=self.entry_image_1
        )
        self.entry_1 = Entry(
            bd=0,
            bg="#E3E3E3",
            fg="#000716",
            highlightthickness=0,
            font=("RobotoRoman Bold", 16 * -1)
        )
        self.entry_1.place(
            x=101.0,
            y=147.0,
            width=304.0,
            height=38.0
        )

        self.canvas.create_text(
            449.0,
            123.0,
            anchor="nw",
            text="Password:",
            fill="#555454",
            font=("RobotoRoman Bold", 16 * -1)
        )

        entry_image_2 = PhotoImage(
            file=self.relative_to_assets("entry_2.png"))
        entry_bg_2 = self.canvas.create_image(
            603.0,
            167.0,
            image=entry_image_2
        )
        self.entry_2 = Entry(
            bd=0,
            bg="#E3E3E3",
            fg="#000716",
            highlightthickness=0,
            font=("RobotoRoman Bold", 16 * -1)
        )
        self.entry_2.place(
            x=451.0,
            y=147.0,
            width=304.0,
            height=38.0
        )

        self.canvas.create_text(
            99.0,
            210.0,
            anchor="nw",
            text="Full name:",
            fill="#555454",
            font=("RobotoRoman Bold", 16 * -1)
        )

        self.canvas.create_text(
            260.0,
            454.0,
            anchor="nw",
            text="Already have an account?",
            fill="#555454",
            font=("RobotoRoman Regular", 16 * -1)
        )

        entry_image_3 = PhotoImage(
            file=self.relative_to_assets("entry_3.png"))
        entry_bg_3 = self.canvas.create_image(
            253.0,
            254.0,
            image=entry_image_3
        )
        self.entry_3 = Entry(
            bd=0,
            bg="#E3E3E3",
            fg="#000716",
            highlightthickness=0,
            font=("RobotoRoman Bold", 16 * -1)
        )
        self.entry_3.place(
            x=101.0,
            y=234.0,
            width=304.0,
            height=38.0
        )

        self.canvas.create_text(
            449.0,
            210.0,
            anchor="nw",
            text="Address:",
            fill="#555454",
            font=("RobotoRoman Bold", 16 * -1)
        )

        entry_image_4 = PhotoImage(
            file=self.relative_to_assets("entry_4.png"))
        entry_bg_4 = self.canvas.create_image(
            603.0,
            254.0,
            image=entry_image_4
        )
        self.entry_4 = Entry(
            bd=0,
            bg="#E3E3E3",
            fg="#000716",
            highlightthickness=0,
            font=("RobotoRoman Bold", 16 * -1)
        )
        self.entry_4.place(
            x=451.0,
            y=234.0,
            width=304.0,
            height=38.0
        )

        self.canvas.create_text(
            99.0,
            290.0,
            anchor="nw",
            text="Date of birth",
            fill="#555454",
            font=("RobotoRoman Bold", 16 * -1)
        )

        entry_image_5 = PhotoImage(
            file=self.relative_to_assets("entry_5.png"))
        entry_bg_5 = self.canvas.create_image(
            253.0,
            334.0,
            image=entry_image_5
        )
        self.entry_5 = Entry(
            bd=0,
            bg="#E3E3E3",
            fg="#000716",
            highlightthickness=0,
            font=("RobotoRoman Bold", 16 * -1)
        )
        self.entry_5.place(
            x=101.0,
            y=314.0,
            width=304.0,
            height=38.0
        )

        self.canvas.create_text(
            449.0,
            290.0,
            anchor="nw",
            text="Phone:",
            fill="#555454",
            font=("RobotoRoman Bold", 16 * -1)
        )

        entry_image_6 = PhotoImage(
            file=self.relative_to_assets("entry_6.png"))
        entry_bg_6 = self.canvas.create_image(
            603.0,
            334.0,
            image=entry_image_6
        )
        self.entry_6 = Entry(
            bd=0,
            bg="#E3E3E3",
            fg="#000716",
            highlightthickness=0,
            font=("RobotoRoman Bold", 16 * -1)
        )
        self.entry_6.place(
            x=451.0,
            y=314.0,
            width=304.0,
            height=38.0
        )

        button_image_1 = PhotoImage(
            file=self.relative_to_assets("button_1.png"))
        button_1 = Button(
            image=button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.check_Register_click(),
            relief="flat"
        )
        button_1.place(
            x=341.0,
            y=388.0,
            width=164.0,
            height=40.0
        )

        button_image_2 = PhotoImage(
            file=self.relative_to_assets("button_2.png"))
        button_2 = Button(
            image=button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.check_login_click(),
            relief="flat"
        )
        button_2.place(
            x=454.0,
            y=451.0,
            width=103.0,
            height=26.0
        )

        image_image_1 = PhotoImage(
            file=self.relative_to_assets("image_1.png"))
        image_1 = self.canvas.create_image(
            1012.0,
            254.0,
            image=image_image_1
        )
        self.window.resizable(False, False)
        self.window.mainloop()

    def check_login_click(self):
        self.window.destroy()
        from gui_login import LoginWindow
        loginPage = LoginWindow()
        loginPage.UIlogin_window()

    def check_Register_click(self):
        self.validate_date()
        check = 0
        validateLengthPass = self.entry_2.get()
        if self.entry_1.get() == "" or self.entry_2.get() == ""or self.entry_3.get() == ""or self.entry_4.get() == ""or self.entry_5.get() == "" or self.entry_6.get() == "":
            messagebox.showwarning("Required","All fields are required")
        elif len(validateLengthPass) < 4 :
            messagebox.showwarning("Password warning", "Password needs a minimum of 4 characters ")

        else:
            self.validate_date()
            try:
                SqlSever = MSSQLConnection()
                SqlSever.connect()
                Query  = ('SELECT * FROM users WHERE username = ? ')
                values =( self.entry_1.get())
                searchUserName = SqlSever.query(Query, values)

                if searchUserName != []:
                    messagebox.showwarning("Warning User Name","User Name already exist")

                else:
                    Query1 = 'INSERT INTO users (username, userpassword, fullname, adress, birth, phone ,userrole) VALUES (?,?,?,?,?,?,?)'
                    values1 = (self.entry_1.get(),
                              self.entry_2.get(),
                              self.entry_3.get(),
                              self.entry_4.get(),
                              self.entry_5.get(),
                              self.entry_6.get(),
                              'Agent'
                              )
                    createUser= SqlSever.insert(Query1, values1)
                    print(createUser)
                    messagebox.showinfo("Success", "Create User Success")
                    check=1

            except Exception as e:
                messagebox.showerror("Error", f"Error: {e}")
            finally:
                SqlSever.close()
                if check:
                    self.check_login_click()

    # def validate_date(self):
    #     date_str = self.entry_5.get()
    #     try:
    #         date_obj = datetime.strptime(date_str, "%Y-%m-%d")
    #     except ValueError:
    #         messagebox.showerror("Error Date", "Invalid date format. Please enter the date in YYYY-MM-DD format.")
if __name__ == "__main__":
    register_window = RegisterWindow()
    register_window.UIregister_window()